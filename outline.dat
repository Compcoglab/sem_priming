the program will read in the data base
"spp_excel.csv"

then the program will read in the command file
"user_args.txt"

command file format
    - the first line of the file will contain arguments to be executed on the data,
      form of CSV List, where each string in CSV List is an operation that will narrow down results
      (make a list)
       
    - all lines after the first line will be target words to search the data base for (make a list)
    
the program will open an output file for writing results of searches to the file

search the user's list of target words first and make a reduced matrix of those words, output to file,
move to next step once word_list.empty()

then apply the narrowing criteria from queue inorder one at a time to smaller matrix,
make a reduced matrix of those words, output to file, etc...

keep going until ( list.empty() || reduced search matrix.size() == 0)

----------------------------------

vector< vector<string> > matrix;

matrix[i][j]

i = rows
j = columns

first row in matrix is column names

-----------------------------------
database size

40 columns
1662 rows

matrix[i][0] = target words

target words are sorted in alphabetical order,
uses a binary search to find entries in matrix

once word is located, extract row information
else print error message, search next word... etc

---------------------------------------


ALSO:
- might need space trimmer that takes leading && trailing whitespace off

- should probably rename the columns to shorter names.

- searches should be executed sequentially when reducing the matrix

- debate between using only 1 output file OR a separate output for each reduction
  the issue would be making sure that the previous data written to the file is not overwritten with each new output.
  this could involve keeping the output file open the whole time, or taking precautions to append the new searches in a non destructive way.

================

